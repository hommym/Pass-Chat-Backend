// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


enum AccountType{
  admin
  user
}

enum AccountStatus{
active
suspend
blocked
}

enum AdminRoles{
  superAdmin
  manager
  moderator
  analyst
}

enum OnlineStatus{
  online
  offline
  call
  typing
  recording
}

enum RoomType{
  private
  channel
  group
}

enum MessageType{
  text
  video
  audio
  image
  call
}

enum NotificationType{
  private
  system
  call
  community
}

enum ContactStatus{
  active
  blocked
}

enum Platform{
  mobile
  browser
}

enum NotificationAction{
  updateMessage
  deleteMessage
  saveMessage
  deleteCommunity
}

enum CallType{
  video
  audio
}

enum CommunityType{
  group
  channel
}

enum CommunityVisibility{
  public
  private
}

enum CommunityRole{
  owner
  admin
  member
}

enum CommunityPermissionsLevels{
  admins
  all
}

enum OS{
  android 
  ios
  desktop  // this encapsulates all pc oprating systems
}


enum flaggedContent{
  message
  account
  community
}

enum flaggedBy {
  user
  system
}

enum flagStatus{
  pending
  declined
  approved
}

enum flagReason {
  spam
  violence
  hateSpeech
  pornography
}

model User {
  id                Int             @id @default(autoincrement())
  email             String?         @unique
  phone             String?         @unique
  fullName          String?
  username          String?
  password          String?
  bio               String?
  profile           String?         @db.LongText
  type              AccountType     @default(user)
  status            AccountStatus   @default(active)
  onlineStatus      OnlineStatus    @default(offline)
  isWebActive       Boolean         @default(false)
  webConnectionId   String?
  connectionId      String?         @unique
  role              AdminRoles?
  loggedIn          Boolean         @default(false)
  notifications     Notification[]
  contacts          UserContact[]
  chatRoomUser1     ChatRoom[]      @relation("User1")
  chatRoomUser2     ChatRoom[]      @relation("User2")
  communities       Community[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt   // use this get last time user was online

  @@map("users")
}

model TwoFactorAuth {
  id             Int        @id @default(autoincrement())
  userId         Int        @unique
  otpCode        String?    // otpCode stored here is encrypted into a jwt token

  @@map("two_factor_auths")
}

model ChatRoom {
  id             Int        @id @default(autoincrement())
  type           RoomType   @default(private)
  user1Id        Int?       // must have value if type is private(ie 1 to 1)      
  user2Id        Int?       // must have value if type is private(ie 1 to 1) 
  name           String?    // must have a value if type is group or channel
  user1          User?      @relation("User1",fields: [user1Id], references: [id]) 
  user2          User?      @relation("User2",fields: [user2Id], references: [id]) 
  createdAt      DateTime   @default(now())
  messages       Message[]
  community      Community[]

  @@unique([user1Id,user2Id])
  @@map("chat_rooms")
}


model Message {
  id             Int           @id @default(autoincrement())
  type           MessageType   @default(text)
  content        Json
  senderId       Int
  recipientId    Int?
  communityId    Int?
  roomId         Int
  replyTo        Int?          // id of message this message is a reply to
  createdAt      DateTime      @default(now())
  read           Boolean       @default(false)
  recieved       Boolean       @default(false) 
  deleteFlag     Boolean       @default(false)
  reportFlag     Boolean       @default(false)
  views          Int           @default(0)   // this should only be used in community kinds of chats
  comments       Json?         // array of strings
  reactions      Json?         // array of strings
  room           ChatRoom      @relation(fields: [roomId], references: [id])
  callType       CallType?
  notifications  Notification[]
  @@map("messages")
}






model Notification {
  id             Int                 @id @default(autoincrement())
  userId         Int                 
  type           NotificationType    @default(private)
  data           Json?
  messageId      Int?
  communityId    Int?
  action         NotificationAction?
  platform       Platform            @default(mobile)
  user           User                @relation(fields: [userId], references: [id])
  message        Message?            @relation(fields:[messageId],references:[id])        
  createdAt      DateTime            @default(now())

  @@unique([userId,messageId,platform])
  @@unique([userId,communityId,platform])
  @@map("notifications")
}


model UserContact {
   id             Int                 @id @default(autoincrement())
   ownerId        Int                
   phone          String
   profile        String?             @db.LongText
   status         ContactStatus       @default(active)
   roomId         Int?
   user           User                @relation(fields: [ownerId], references: [id])  

    @@unique([ownerId,phone])
    @@map("user_contacts")

}



model Community {
   id                    Int                    @id @default(autoincrement())
   type                  CommunityType          @default(group)
   visibility            CommunityVisibility    @default(public)
   name                  String                
   description           String
   roomId                Int
   subscriberCount       Int                    @default(1)
   ownerId               Int
   permissions           Json?
   profile               String?                @db.LongText
   invitationLink        String?
   status                AccountStatus          @default(active)
   isVerified            Boolean                @default(false)
   createdAt             DateTime               @default(now())
   deleteFlag            Boolean                @default(false)
   members               CommunityMember[]
   room                  ChatRoom               @relation(fields: [roomId], references: [id])
   ownerDetails          User                   @relation(fields: [ownerId], references: [id])

  @@unique([type,ownerId,name])
  @@map("communities")
}


model CommunityMember{
  id                    Int                   @id @default(autoincrement())
  communityId           Int
  userId                Int
  createdAt             DateTime              @default(now())
  deleteFlag            Boolean               @default(false)
  role                  CommunityRole         @default(member)
  community             Community             @relation(fields: [communityId], references: [id])

  @@unique([communityId,userId])
  @@map("community_members")
}


model DailyUser {
   id                    Int                   @id @default(autoincrement())
   userId                Int
   platform              OS
   date                  String
   timezone              String               

   @@unique([userId,date])
   @@map("daily_users")
}


model ActiveCommunity {
  id                    Int                   @id @default(autoincrement())
  communityId           Int
  date                  String                         

  @@unique([communityId,date])
  @@map("active_communities")
}


model flaggedData{
 id                    Int                   @id @default(autoincrement())
 type                  flaggedContent        @default(message)
 flagger               flaggedBy             @default(user)
 reason                flagReason            @default(spam)
 status                flagStatus            @default(pending)
 messageId             Int?
 userId                Int?
 communityId           Int?
 date                  String
 timeStamp             DateTime              @default(now())
 @@map("flagged_data")
}