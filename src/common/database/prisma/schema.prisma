// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


enum AccountType{
  admin
  user
}

enum AccountStatus{
active
suspend
blocked
}

enum AdminRoles{
  superAdmin
  manager
  moderator
  analyst
}

enum OnlineStatus{
  online
  offline
  call
  typing
  recording
}

enum RoomType{
  private
  channel
  group
}

enum MessageType{
  text
  video
  audio
  image
  call
}

enum NotificationType{
  message
  system
  call
}

enum ContactStatus{
  active
  blocked
}

enum Platform{
  mobile
  browser
}

enum NotificationAction{
  updateMessage
  deleteMessage
  saveMessage
}

enum CallType{
  video
  audio
}

model User {
  id                Int             @id @default(autoincrement())
  email             String?         @unique
  phone             String?         @unique
  fullName          String?
  username          String?
  password          String?
  bio               String?
  profile           String?         @db.LongText
  type              AccountType     @default(user)
  status            AccountStatus   @default(active)
  onlineStatus      OnlineStatus    @default(offline)
  isWebActive       Boolean         @default(false)
  webConnectionId   String?
  connectionId      String?         @unique
  role              AdminRoles?
  loggedIn          Boolean         @default(false)
  notifications     Notification[]
  contacts          UserContact[]
  chatRoomUser1     ChatRoom[]      @relation("User1")
  chatRoomUser2     ChatRoom[]      @relation("User2")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt   // use this get last time user was online

  @@map("users")
}

model TwoFactorAuth {
  id             Int        @id @default(autoincrement())
  userId         Int        @unique
  otpCode        String?    // otpCode stored here is encrypted into a jwt token

  @@map("two_factor_auths")
}

model ChatRoom {
  id             Int        @id @default(autoincrement())
  type           RoomType   @default(private)
  user1Id        Int?       // must have value if type is private(ie 1 to 1)      
  user2Id        Int?       // must have value if type is private(ie 1 to 1) 
  name           String?    // must have a value if type is group or channel
  user1          User?      @relation("User1",fields: [user1Id], references: [id]) 
  user2          User?      @relation("User2",fields: [user2Id], references: [id]) 
  createdAt      DateTime   @default(now())
  messages       Message[]

  @@unique([user1Id,user2Id])
  @@map("chat_rooms")
}


model Message {
  id             Int           @id @default(autoincrement())
  type           MessageType   @default(text)
  content        Json
  senderId       Int
  recipientId    Int?
  roomId         Int
  replyTo        Int?          // id of message this message is a reply to
  createdAt      DateTime      @default(now())
  read           Boolean       @default(false)
  recieved       Boolean       @default(false) 
  deleteFlag     Boolean       @default(false)
  room           ChatRoom      @relation(fields: [roomId], references: [id])
  callType       CallType?
  notifications  Notification[]
  @@map("messages")
}


model Notification {
  id             Int                 @id @default(autoincrement())
  userId         Int                 
  type           NotificationType    @default(message)
  data           Json?
  messageId      Int?
  action         NotificationAction?
  platform       Platform            @default(mobile)
  user           User                @relation(fields: [userId], references: [id])
  message        Message?            @relation(fields:[messageId],references:[id])        
  createdAt      DateTime            @default(now())

  @@unique([userId,messageId,platform])
  @@map("notifications")
}


model UserContact {
   id             Int                 @id @default(autoincrement())
   ownerId        Int                
   phone          String
   profile        String?             @db.LongText
   status         ContactStatus       @default(active)
   user           User                @relation(fields: [ownerId], references: [id])  

    @@unique([ownerId,phone])
    @@map("user_contacts")

}




