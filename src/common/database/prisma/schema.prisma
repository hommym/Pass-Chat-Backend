// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


enum AccountType{
  admin
  user
}

enum AccountStatus{
active
suspend
blocked
}

enum AdminRoles{
  superAdmin
  manager
  moderator
  analyst
}

enum OnlineStatus{
  online
  offline
  call
  typing
  recording
}

enum RoomType{
  private
  channel
  group
}

enum MessageType{
  text
  video
  audio
  image
  call
  docs
  contact
  invitation
  poll
  story
}



enum ContactStatus{
  active
  blocked
}

enum Platform{
  mobile
  browser
}

enum NotificationAction{
  updateMessage
  deleteMessage
  saveMessage
  comunityInfoUpdate
  deleteCommunity
  updateChatRoom
  clearChat
  addStory
  removeStory
  communityInvitation
  subSuccess
  subFail
  phoneChange
  contactUpdate
}

enum CallType{
  video
  audio
}

enum CommunityType{
  group
  channel
}

enum CommunityVisibility{
  public
  private
}

enum CommunityRole{
  owner
  admin
  member
}

enum CommunityPermissionsLevels{
  admins
  all
}

enum OS{
  android 
  ios
  desktop  // this encapsulates all pc oprating systems
}


enum flaggedContent{
  message
  account
  community
}

enum flaggedBy {
  user
  system
}

enum flagStatus{
  pending
  declined
  approved
}

enum flagReason {
  spam
  violence
  hateSpeech
  pornography
}

enum CommunityVerificationStatus{
  pending
  reviewed
}

enum CallRoomType {
  private
  public
}

enum FileType {
  norm // for normal files 
  dir  // for directories or folders
}

enum MessageDeleteFlag{
  sender
  all
}


enum PostType{
  text
  image
  video
}


enum SubInterval{
  month
  year
}

enum  UserSubStatus{
paid
unPaid
pending
cancelled
} 

model User {
  id                Int             @id @default(autoincrement())
  email             String?         @unique
  phone             String?         @unique
  fullName          String?
  username          String?
  password          String?
  bio               String?
  profile           String?         @db.LongText
  type              AccountType     @default(user)
  status            AccountStatus   @default(active)
  onlineStatus      OnlineStatus    @default(offline)
  onlineStatusWeb   OnlineStatus    @default(offline) 
  hideOnlineStatus  Boolean         @default(false)   // if true will prevent contacts from see online status or lastseen
  webConnectionId   String?         @unique
  connectionId      String?         @unique
  role              AdminRoles?
  loggedIn          Boolean         @default(false)
  webLoggedIn       Boolean         @default(false)
  platform          OS?                                 // current device user is connected with
  timezone          String?                             // recent time zone user is connected from
  recentLoginDate   String?
  notifications     Notification[]
  contacts          UserContact[]
  chatRoomUser1     ChatRoom[]      @relation("User1")
  chatRoomUser2     ChatRoom[]      @relation("User2")
  communitiesOwned  Community[]
  communities       CommunityMember[]
  callRooms         CallRoom[]
  calRoomParts      CallRoomParticipants[] 
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt   // use this get last time user was online
  stories           Story[]
  userSubscriptions UserSubscription[]

  @@map("users")
}

model TwoFactorAuth {
  id             Int        @id @default(autoincrement())
  userId         Int        @unique
  otpCode        String?    // otpCode stored here is encrypted into a jwt token

  @@map("two_factor_auths")
}

model ChatRoom {
  id             Int              @id @default(autoincrement())
  type           RoomType         @default(private)
  user1Id        Int?             // must have value if type is private(ie 1 to 1)      
  user2Id        Int?             // must have value if type is private(ie 1 to 1) 
  name           String?          // must have a value if type is group or channel
  user1          User?            @relation("User1",fields: [user1Id], references: [id]) 
  user2          User?            @relation("User2",fields: [user2Id], references: [id]) 
  status         ContactStatus?   // this only avialable for private chatRooms   
  createdAt      DateTime         @default(now())
  messages       Message[]
  community      Community[]
  notifications  Notification[]
  contacts       UserContact[]

  @@unique([user1Id,user2Id])
  @@map("chat_rooms")
}


model Message {
  id             Int                      @id @default(autoincrement())
  type           MessageType              @default(text)
  content        Json
  senderId       Int
  recipientId    Int?
  communityId    Int?
  roomId         Int
  replyTo        Int?                     // id of message this message is a reply to
  createdAt      DateTime                 @default(now())
  read           Boolean                  @default(false)
  recieved       Boolean                  @default(false) 
  deleteFlag     MessageDeleteFlag?      
  reportFlag     Boolean                  @default(false)
  blockedFlag    Boolean                  @default(false)
  pinned         Boolean                  @default(false)
  views          Int                      @default(0)   // this should only be used in community kinds of chats
  comments       Json?                    // array of strings
  reactions      Json?                    // array of strings
  room           ChatRoom                 @relation(fields: [roomId], references: [id])
  callType       CallType?
  notifications  Notification[]
  @@map("messages")
}



// ownerId should be set to 0 if chats are been cleared for all participants in a community
model ClearedChatsTracker{
   id               Int                      @id @default(autoincrement())
   roomId           Int                      
   ownerId          Int                      @default(0)
   communityId      Int                      @default(0)  // set to 0 if deletion is for private chat room
   clearedMessages  Json                                 // list of ids of messages that was cleared 

  @@unique([roomId,ownerId,communityId])
  @@map("cleared_chats_tracker")
}






model Notification {
  id                Int                 @id @default(autoincrement())
  userId            Int                 
  action            NotificationAction
  platform          Platform            @default(mobile)
  data              Json?
  messageId         Int?
  communityId       Int?
  chatRoomId        Int?
  storyId           Int?
  subPlanId         Int?
  user              User                @relation(fields: [userId], references: [id])
  message           Message?            @relation(fields:[messageId],references:[id])   
  community         Community?          @relation(fields:[communityId],references:[id])     
  chatRoom          ChatRoom?           @relation(fields:[chatRoomId],references:[id])     
  createdAt         DateTime            @default(now())

  @@map("notifications")
}


model UserContact {
   id             Int                 @id @default(autoincrement())
   ownerId        Int                
   phone          String
   contactName    String?
   profile        String?             @db.LongText
   status         ContactStatus       @default(active)
   roomId         Int?
   user           User                @relation(fields: [ownerId], references: [id])  
   room           ChatRoom?           @relation(fields: [roomId], references: [id]) 

    @@unique([ownerId,phone])
    @@map("user_contacts")

}



model Community {
   id                    Int                    @id @default(autoincrement())
   type                  CommunityType          @default(group)
   visibility            CommunityVisibility    @default(public)
   name                  String                
   description           String
   roomId                Int
   subscriberCount       Int                    @default(1)
   ownerId               Int
   permissions           Json?
   profile               String?                @db.LongText
   invitationLink        String?
   status                AccountStatus          @default(active)
   isVerified            Boolean                @default(false)
   createdAt             DateTime               @default(now())
   deleteFlag            Boolean                @default(false)              
   members               CommunityMember[]
   communityVerf         CommunityVerification[]
   room                  ChatRoom               @relation(fields: [roomId], references: [id])
   ownerDetails          User                   @relation(fields: [ownerId], references: [id])
   activePeriods         ActiveCommunity[] 
   callRoom              CallRoom[]   
   notifications         Notification[]                         

  @@unique([type,ownerId,name])
  @@map("communities")
}


model CommunityMember{
  id                    Int                   @id @default(autoincrement())
  communityId           Int
  userId                Int
  createdAt             DateTime              @default(now())
  deleteFlag            Boolean               @default(false)
  role                  CommunityRole         @default(member)
  community             Community             @relation(fields: [communityId], references: [id])
  userDetails           User                  @relation(fields: [userId], references: [id])

  @@unique([communityId,userId])
  @@map("community_members")
}


model DailyUser {
   id                    Int                   @id @default(autoincrement())
   userId                Int
   platform              OS
   date                  DateTime              @db.Date @default(dbgenerated("CURRENT_DATE")) 
   timezone              String               

   @@unique([userId,date])
   @@map("daily_users")
}


model ActiveCommunity {
  id                    Int                   @id @default(autoincrement())
  communityId           Int
  date                  DateTime              @db.Date @default(dbgenerated("CURRENT_DATE")) 
  numberOfEngagement    Int                   @default(0)  
  type                  CommunityType
  community             Community             @relation(fields: [communityId], references: [id])                       
  @@unique([communityId,date])
  @@map("active_communities")
}

model DailyCommunityEngagement {
  id                    Int                   @id @default(autoincrement())
  userId                Int
  date                  String
  communityId           Int

  @@unique([userId,communityId,date])
  @@map("daily_community_engagements")
}


model flaggedData{
 id                    Int                   @id @default(autoincrement())
 type                  flaggedContent        @default(message)
 flagger               flaggedBy             @default(user)
 reason                flagReason            @default(spam)
 status                flagStatus            @default(pending)
 messageId             Int?
 userId                Int?
 communityId           Int?
 date                  String
 timeStamp             DateTime              @default(now())
 @@map("flagged_data")
}


model CommunityVerification {
   id                    Int                         @id @default(autoincrement())
   communityId           Int
   websiteUrl            String?
   otherSocials          Json                        //list of social media handles(links) with verified status
   supportingDocs        Json
   reason                String
   contact               String                      //email address to send results to after review
   status                CommunityVerificationStatus @default(pending)
   community             Community                   @relation(fields: [communityId], references: [id])
   createdAt             DateTime                    @default(now())

   @@map("community_verfications")
}



model CallRoom {
  id                    Int                         @id @default(autoincrement())
  type                  CallRoomType                @default(public)
  callType              CallType                    @default(audio)
  creatorId             Int
  communityId           Int?                        // this is only set for when type is public
  creator               User                        @relation(fields:[creatorId],references:[id])
  community             Community?                  @relation(fields:[communityId],references:[id])
  participants          CallRoomParticipants[]

  @@map("call_rooms")
}




model CallRoomParticipants{
  id                    Int                         @id @default(autoincrement())
  callRoomId            Int 
  callRoom              CallRoom                    @relation(fields:[callRoomId],references:[id])   
  participantId         Int
  participant           User                        @relation(fields:[participantId],references:[id]) 
  isOnCall              Boolean                     @default(false)

  @@unique([callRoomId,participantId])
  @@map("call_room_participants")
}


model File{
  id                    Int                         @id @default(autoincrement())
  ownerId               Int
  name                  String                      
  type                  FileType                    @default(norm)
  createdAt             DateTime                    @default(now())
  isRoot                Boolean                     @default(false)
  dataUrl               String?                     // should only be set for files of type norm 
  parentId              Int?                        // should be set for all files except the root folder
  parent                File?                       @relation("SubFiles",fields:[parentId],references:[id])
  subFiles              File[]                      @relation("SubFiles")

  
   @@unique([ownerId,parentId,name,type])
   @@map("files")
}



model Story{
    id                    Int                         @id @default(autoincrement())
    ownerId               Int
    type                  PostType                    @default(image)
    content               String                      @db.LongText                 // stringified Json
    exclude               Json?                       // user contact accounts which were excluded from seeing this post
    createdAt             DateTime                    @default(now())
    owner                 User                        @relation(fields: [ownerId], references: [id])
   

  @@map("stories")
}




model DailyUploadQuota{
  userId      Int      @unique
  day         String   // Use ISO format "yyyy-mm-dd" for date only
  quotaUsed   Int      @default(0)


  @@id([userId,day])
  @@map("daily_upload_quota")  
}



model SubscriptionPlan{
   id                    Int                         @id @default(autoincrement())
   name                  String
   description           String
   interval              SubInterval                 @default(month)
   price                 Int
   benefit               Json
   stripProductId        String?
   stripePriceId         String?
   userSubscriptions     UserSubscription[]

   @@unique([name,interval])
   @@map("subscription_plans")
}

model CheckoutSession{
  sessionId                  String              @id
  planId                     Int
  userId                     Int
  createdAt                  DateTime            @default(now())

  @@map("checkout_sessions")
}


model UserSubscription {
  subId                      String              @id
  stripeCustomerId           String              @unique
  planId                     Int
  userId                     Int                 
  status                     UserSubStatus       @default(paid)
  subPlan                    SubscriptionPlan    @relation(fields: [planId], references: [id])
  user                       User                @relation(fields:[userId],references:[id])
  createdAt                  DateTime            @default(now())
  

  @@unique([planId,userId])
  @@map("user_subscriptions")
}